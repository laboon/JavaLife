import static org.junit.Assert.*;

import org.junit.*;

public class WorldTest {

	
	/*
	 * Tests a specific seed. Both before and after the modification, inputting the same size, seed, and percentage
	 * should result in the same thing.
	 */
	@Test
	public void testSeed(){
		World testWorld = new World(10, 5, 50);
		
		String result = testWorld.toString();
	//	System.out.println
		
		
		assertEquals(result, "  0123456789\n"
				+ "0 ...XXX..XX\n"
				+ "1 XXX.X..XXX\n"
				+ "2 X.X..X.XXX\n"
				+ "3 ...XXXXX.X\n"
				+ "4 ....X..X..\n"
				+ "5 XXXXXX.XXX\n"
				+ "6 ..XX..X.XX\n"
				+ "7 XX.X....X.\n"
				+ "8 .......X.X\n"
				+ "9 XXXXX.X...\n");

	}
	
	
	/*
	 * This tests that the number of X's + number of .'s adds up to n*n, where n is the size of the board. It does
	 * this by grabbing these numbers from the String generated by the World toString method, and so should provide
	 * another level of certainty that the method is working properly.
	 */
	@Test
	public void testAliveAndDeadTotals(){
		
		int worldSize = 20;
		World largeWorld = new World(worldSize, 5, 50);
		String result = largeWorld.toString();
		
		int numX = 0;
		int numPeriod = 0;
		for (int i=0; i<result.length(); i++){
			if (result.charAt(i) == 'X'){
				numX++;
			}
			else if (result.charAt(i) == '.'){
				numPeriod++;
			}
		}
		
		assertEquals(worldSize*worldSize, numX+numPeriod);
	}
	
	/*
	 * Tests whether the output of a size zero world is as we expect: two spaces and a newline
	 */
	@Test
	public void testSizeZeroWorld(){
		int worldSize = 0;
		World largeWorld = new World(worldSize, 5, 50);
		assertEquals(largeWorld.toString(), "  \n");
	}
	
	/*
	 * Tests whether trying a negative world size can even reach the toString() statement
	 */
	@Test
	public void testNegativeSizeWorld(){
		int worldSize = -1;
		World largeWorld = null;
		try{
			largeWorld = new World(worldSize, 5, 50);
			assertEquals(largeWorld.toString(), "YOU SHOULD NOT BE HERE");
			System.out.println("toString reached, failing test");
			fail();
		}
		catch(Exception e){
			assertEquals("java.lang.NegativeArraySizeException", e.toString());
		}
		
	}
	/*
	 * Tests that a world with all alive cells has all X's in its toString matrix
	 */
	@Test
	public void testAliveWorld(){
		int worldSize = 20;
		World largeWorld = new World(worldSize, 5, 100);
		String result = largeWorld.toString();
		
		int numX = 0;
		for (int i=0; i<result.length(); i++){
			if (result.charAt(i) == 'X'){
				numX++;
			}
		}
	
		assertEquals(worldSize*worldSize, numX);
	}
	
	/*
	 * Tests that a world with all dead cells has all .'s in its toString matrix
	 */
	@Test
	public void testDeadWorld(){
		int worldSize = 20;
		World largeWorld = new World(worldSize, 5, 0);
		String result = largeWorld.toString();
		
		int numPeriod = 0;
		for (int i=0; i<result.length(); i++){
			if (result.charAt(i) == '.'){
				numPeriod++;
			}
		}
		assertEquals(worldSize*worldSize, numPeriod);
	}
	

}
